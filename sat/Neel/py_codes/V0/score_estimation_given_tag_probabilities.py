import pandas
import numpy
import os
#define the location of the scripts
script_path=os.path.dirname(os.path.realpath(__file__))
#define the location of all the datafiles
data_path=os.path.join(script_path,"data")

def GM(lst):
    temp=1
    for i in lst:
        temp*=i
    temp=temp**(1/float(len(lst)))
    return temp
    
    
#This function reads the tagged sat sample tests ans return them in a list of pandas dataframe
def read_tests():
    test=[];scaling=[]
    for k in range(3):  #currently we have only 3 tagged sample test 
        test.append(pandas.read_csv(os.path.join(data_path,"test"+str(k+1)+" tagged revised.csv")).iloc[1:]) #the naming convention of the files is "test{i} tagged revised.csv", i is serial number
        scaling.append(pandas.read_csv(os.path.join(data_path,"test"+str(k+1)+"scaling.csv")))
    return test,scaling


# This is the default value of the argument tag_probabilities to be passed in the function estimate score.
p={'1.1.1.':0.97,'1.1.2.1.':0.97,'1.1.2.2.':0.97,'1.1.2.3.':0.97,'1.1.2.4.':0.97,'1.1.3.':0.85,'1.2.1.':0.62,'1.2.2.':0.62,'1.3.1.':0.85,'1.3.2.1.':0.62,'1.3.2.2.':0.62,'1.3.2.3.':0.62,'1.4.1.':0.62,'1.4.2.':0.62,'1.4.3.1.':0.62,'1.4.3.2.':0.62,'1.4.3.3.':0.62,'1.4.3.4.':0.30,'1.4.3.5.':0.62,'1.4.3.6.':0.62,'1.4.4.1.':0.30,'1.4.4.2.':0.30,'1.4.4.3.':0.62,'1.4.4.4.':0.85,'1.5.1.1.':0.85,'1.5.1.2.':0.62,'1.5.1.3.':0.85,'1.5.2.':0.62,'1.5.3.':0.30,'1.6.1.1.':0.97,'1.6.1.2.1':0.85,'1.6.1.2.2':0.85,'1.6.1.2.3':0.85,'1.6.1.2.4':0.85,'1.6.1.2.5':0.85,'1.6.1.3.1.':0.62,'1.6.1.3.2.':0.30,'1.6.2.':0.30,'1.6.3.1.':0.62,'1.6.3.2.':0.30,'1.6.3.3.':0.30,'1.6.4.':0.30,'1.7.1.1.':0.62,'1.7.1.2.':0.62,'1.7.1.3.':0.30,'1.7.1.4.':0.30,'1.7.2.1.':0.62,'1.7.2.2.':0.30,'1.7.3.':0.97,'1.8.1.':0.85,'1.8.2.':0.62,'1.8.3.':0.30,'1.8.4.':0.30,'1.9.':0.30,'1.10.1.':0.30,'1.10.2.1.':0.07,'1.10.2.2.':0.07,'1.10.2.3.':0.07,'1.10.3.1.':0.07,'1.10.3.2.':0.07,'1.10.3.3.':0.07,'1.11.1.':0.85,'1.11.2.':0.62,'1.11.3.1.':0.30,'1.11.3.2.':0.07,'1.11.4.1.':0.30,'1.11.4.2.':0.07,'1.12.':0.97,'1.13.1.':0.85,'1.13.2.':0.85,'2.1.':0.97,'2.2.1.':0.85,'2.2.2.':0.85,'2.2.3.':0.85,'2.2.4.':0.85,'2.3.1.':0.62,'2.3.2.':0.30,'2.3.3.1.':0.30,'2.3.3.2.':0.07,'2.3.4.1.':0.30,'2.3.4.2.':0.07,'2.4.1':0.85,'2.4.2':0.07,'2.4.3':0.07,'2.5.':0.07,'2.6.':0.30,'2.7.':0.62,'2.8.':0.30,'2.9.':0.07,'2.10.1.':0.85,'2.10.2.':0.85,'2.11.':0.97,'2.12.1.':0.62,'2.12.2.':0.62,'2.12.3.':0.30,'2.12.4.1.':0.30,'2.12.4.2.':0.30,'2.12.4.3.':0.07,'2.12.4.4.':1,'2.12.4.5.':1,'2.12.5.':0.07,'2.12.6.':0.62,'2.12.7.':0.30,'3.1.1.':0.97,'3.1.2.':0.85,'3.2.1.':0.97,'3.2.2.':0.30,'3.2.3.':0.30,'3.2.4.':0.85,'3.2.5.':0.62,'3.3.1.':0.97,'3.3.2.':0.85,'3.3.3.':0.62,'3.3.4.1.':0.85,'3.3.4.2.':0.62,'3.3.5.1.':0.85,'3.3.5.2.':0.62,'3.3.6.1.':0.62,'3.3.6.2.':0.30,'3.3.6.3.':0.62,'3.3.7.1.':0.62,'3.3.7.2.':0.62,'3.3.7.3.':0.62,'3.3.7.4.':0.62,'3.3.8.1.':0.07,'3.3.8.2.':0.07,'3.3.9.':0.62,'3.4.1.':0.97,'3.4.2.1.':0.85,'3.4.2.2.':0.30,'3.4.3.1.':0.85,'3.4.3.2.':0.30,'3.4.3.3.':0.30,'3.4.4.':0.85,'3.5.':0.62,'3.6.1.':0.97,'3.6.2.1.':1,'3.6.2.2.':1,'3.6.3.':0.85,'3.6.4.':0.30,'3.6.5.1.':0.30,'3.6.5.2.':0.07,'3.7.1.1.':0.30,'3.7.1.2.':0.30,'3.7.1.3.':0.07,'3.7.2.1.':0.30,'3.7.2.2.':0.07,'3.7.2.3.':0.07,'3.7.3.1.':0.07,'3.7.3.2.':0.07,'3.7.3.3.':0.07,'3.7.3.4.':0.07,'3.7.4.1.':0.07,'3.7.4.2.':0.07,'3.7.4.3.':0.07,'3.7.5.1.':0.07,'3.7.5.2.':0.07,'3.7.5.3.':0.07,'3.8.1.':0.30,'3.8.2.':0.30,'3.8.3.':0.30,'3.8.4.1.':0.30,'3.8.4.2.':0.07,'3.8.4.3.':0.07,'3.9.1.':1,'3.9.2.':1,'3.9.3.':1,'3.10.':0.07,'3.11.':0.85,'3.12.':0.62,'4.1.1.':0.30,'4.1.2.':0.97,'4.1.3.':0.97,'4.1.4.':0.97,'4.1.5.':0.30,'4.2.':0.07,'4.3.1.1.':0.85,'4.3.1.2.':0.62,'4.3.1.3.':0.62,'4.3.2.1.':0.07,'4.3.2.2.':0.07,'4.3.3.':0.85,'4.3.4.1.':0.07,'4.3.4.2.':1,'4.4.1.':0.30,'4.4.2.':0.30,'4.4.3.':0.30,'4.4.4.':0.30,'4.4.5.':0.07,'5.1.':0.07,'5.2.':0.85,'5.3.':0.85,'5.4.':0.85,'5.5.':62,'5.6.':0.85,'5.7.':0.30,'5.8.':0.30,'5.9.':0.62,'5.10.':0.07,'5.11.':0.62,'5.12.':0.62,'5.13.':0.30,'5.14.':0.30,'5.15.':0.62,'5.16.':0.30,'5.17.':0.62,'5.18.':0.30,'5.19.':0.30}

#This function takes the probability of a student knowing the tags as input and computes his expected score in the SAT esamination
def estimate_score(tag_probabilities=p,tests=None,scalings=None):
    if tests is None:
        tests,scalings=read_tests()
    score=list()
    for k in range(3):   
        response=list()
        for i in range(2,56):
            tag_present=tests[k].WBS[tests[k].iloc[:,i].notnull()].tolist()
            response.extend([numpy.prod([p[j] for j in tag_present])])
        raw_score=int(round(sum(response)))
        score.extend(scalings[k].scaled[scalings[k].raw==raw_score].tolist())
    avg_score=int(round(numpy.mean(score)))
    return avg_score




###########Simulation for testing. No need in original code
#    tags=test.WBS.tolist()
#    prob=numpy.random.uniform(0,1,len(tags)).tolist()
#    p=dict(zip(tags,prob))

