import json
import os
from score_estimation_given_tag_probabilities import *
script_path=os.path.dirname(os.path.realpath(__file__))
data_path=os.path.join(script_path,"data")




path={'Q1':0,'Q1.1':0,'Q1.1.1':1,'Q1.1.2':0,'Q1.2':1,'Q1.3':1}
p={'1.1.1.':0.97,'1.1.2.1.':0.97,'1.1.2.2.':0.97,'1.1.2.3.':0.97,'1.1.2.4.':0.97,'1.1.3.':0.85,'1.2.1.':0.62,'1.2.2.':0.62,'1.3.1.':0.85,'1.3.2.1.':0.62,'1.3.2.2.':0.62,'1.3.2.3.':0.62,'1.4.1.':0.62,'1.4.2.':0.62,'1.4.3.1.':0.62,'1.4.3.2.':0.62,'1.4.3.3.':0.62,'1.4.3.4.':0.30,'1.4.3.5.':0.62,'1.4.3.6.':0.62,'1.4.4.1.':0.30,'1.4.4.2.':0.30,'1.4.4.3.':0.62,'1.4.4.4.':0.85,'1.5.1.1.':0.85,'1.5.1.2.':0.62,'1.5.1.3.':0.85,'1.5.2.':0.62,'1.5.3.':0.30,'1.6.1.1.':0.97,'1.6.1.2.1':0.85,'1.6.1.2.2':0.85,'1.6.1.2.3':0.85,'1.6.1.2.4':0.85,'1.6.1.2.5':0.85,'1.6.1.3.1.':0.62,'1.6.1.3.2.':0.30,'1.6.2.':0.30,'1.6.3.1.':0.62,'1.6.3.2.':0.30,'1.6.3.3.':0.30,'1.6.4.':0.30,'1.7.1.1.':0.62,'1.7.1.2.':0.62,'1.7.1.3.':0.30,'1.7.1.4.':0.30,'1.7.2.1.':0.62,'1.7.2.2.':0.30,'1.7.3.':0.97,'1.8.1.':0.85,'1.8.2.':0.62,'1.8.3.':0.30,'1.8.4.':0.30,'1.9.':0.30,'1.10.1.':0.30,'1.10.2.1.':0.07,'1.10.2.2.':0.07,'1.10.2.3.':0.07,'1.10.3.1.':0.07,'1.10.3.2.':0.07,'1.10.3.3.':0.07,'1.11.1.':0.85,'1.11.2.':0.62,'1.11.3.1.':0.30,'1.11.3.2.':0.07,'1.11.4.1.':0.30,'1.11.4.2.':0.07,'1.12.':0.97,'1.13.1.':0.85,'1.13.2.':0.85,'2.1.':0.97,'2.2.1.':0.85,'2.2.2.':0.85,'2.2.3.':0.85,'2.2.4.':0.85,'2.3.1.':0.62,'2.3.2.':0.30,'2.3.3.1.':0.30,'2.3.3.2.':0.07,'2.3.4.1.':0.30,'2.3.4.2.':0.07,'2.4.1':0.85,'2.4.2':0.07,'2.4.3':0.07,'2.5.':0.07,'2.6.':0.30,'2.7.':0.62,'2.8.':0.30,'2.9.':0.07,'2.10.1.':0.85,'2.10.2.':0.85,'2.11.':0.97,'2.12.1.':0.62,'2.12.2.':0.62,'2.12.3.':0.30,'2.12.4.1.':0.30,'2.12.4.2.':0.30,'2.12.4.3.':0.07,'2.12.4.4.':1,'2.12.4.5.':1,'2.12.5.':0.07,'2.12.6.':0.62,'2.12.7.':0.30,'3.1.1.':0.97,'3.1.2.':0.85,'3.2.1.':0.97,'3.2.2.':0.30,'3.2.3.':0.30,'3.2.4.':0.85,'3.2.5.':0.62,'3.3.1.':0.97,'3.3.2.':0.85,'3.3.3.':0.62,'3.3.4.1.':0.85,'3.3.4.2.':0.62,'3.3.5.1.':0.85,'3.3.5.2.':0.62,'3.3.6.1.':0.62,'3.3.6.2.':0.30,'3.3.6.3.':0.62,'3.3.7.1.':0.62,'3.3.7.2.':0.62,'3.3.7.3.':0.62,'3.3.7.4.':0.62,'3.3.8.1.':0.07,'3.3.8.2.':0.07,'3.3.9.':0.62,'3.4.1.':0.97,'3.4.2.1.':0.85,'3.4.2.2.':0.30,'3.4.3.1.':0.85,'3.4.3.2.':0.30,'3.4.3.3.':0.30,'3.4.4.':0.85,'3.5.':0.62,'3.6.1.':0.97,'3.6.2.1.':1,'3.6.2.2.':1,'3.6.3.':0.85,'3.6.4.':0.30,'3.6.5.1.':0.30,'3.6.5.2.':0.07,'3.7.1.1.':0.30,'3.7.1.2.':0.30,'3.7.1.3.':0.07,'3.7.2.1.':0.30,'3.7.2.2.':0.07,'3.7.2.3.':0.07,'3.7.3.1.':0.07,'3.7.3.2.':0.07,'3.7.3.3.':0.07,'3.7.3.4.':0.07,'3.7.4.1.':0.07,'3.7.4.2.':0.07,'3.7.4.3.':0.07,'3.7.5.1.':0.07,'3.7.5.2.':0.07,'3.7.5.3.':0.07,'3.8.1.':0.30,'3.8.2.':0.30,'3.8.3.':0.30,'3.8.4.1.':0.30,'3.8.4.2.':0.07,'3.8.4.3.':0.07,'3.9.1.':1,'3.9.2.':1,'3.9.3.':1,'3.10.':0.07,'3.11.':0.85,'3.12.':0.62,'4.1.1.':0.30,'4.1.2.':0.97,'4.1.3.':0.97,'4.1.4.':0.97,'4.1.5.':0.30,'4.2.':0.07,'4.3.1.1.':0.85,'4.3.1.2.':0.62,'4.3.1.3.':0.62,'4.3.2.1.':0.07,'4.3.2.2.':0.07,'4.3.3.':0.85,'4.3.4.1.':0.07,'4.3.4.2.':1,'4.4.1.':0.30,'4.4.2.':0.30,'4.4.3.':0.30,'4.4.4.':0.30,'4.4.5.':0.07,'5.1.':0.07,'5.2.':0.85,'5.3.':0.85,'5.4.':0.85,'5.5.':62,'5.6.':0.85,'5.7.':0.30,'5.8.':0.30,'5.9.':0.62,'5.10.':0.07,'5.11.':0.62,'5.12.':0.62,'5.13.':0.30,'5.14.':0.30,'5.15.':0.62,'5.16.':0.30,'5.17.':0.62,'5.18.':0.30,'5.19.':0.30}


#The following function takes the list of question names that are present in'
#the loop_path and returns a dictionary of those questions. For now it reads all 
#questios from a text file. We need to make changes in this function in future when
#the questions will be read from database. 
def get_questions(qnames):
    filename=os.path.join(data_path,"qstns.txt")
    with open(filename,"rb") as file_pointer:
        qstns=json.load(file_pointer)
    ret=dict()
    for key in qnames:
        try:
            ret[key]=qstns[key]
        except:
            print "Question {0} doesn't exist".format(key)
    return ret




def bkt_update(resp,prior,p_t=0.5,p_s=0.2,p_g=0.25):
    if resp:
        cond_prior=prior*(1-p_s)/(prior*(1-p_s)+(1-prior)*p_g)
    else:
        cond_prior=prior*p_s/(prior*p_s+(1-prior)*(1-p_g))
    cond_posterior=cond_prior+(1-cond_prior)*p_t
    return cond_posterior


    
def prob_update_after_loop(loop_path=path, prior_prob=p.copy(),qstns=None):
    qnames=loop_path.keys()
    if qstns is None:
        qstns=get_questions(qnames)
    tag_occurance=dict()
    for key in loop_path.keys():
        for tag in qstns[key]["tags"]:
            try:
                tag_occurance[tag].append(key)
            except:
                tag_occurance[tag]=[key]
#    print tag_occurance #for testing. Remove in final code. 
    for tag,itm in tag_occurance.iteritems():
        temp_resp=[loop_path[i] for i in itm]
        if 1 in temp_resp:
            prior_prob[tag]=bkt_update(1,p[tag])
        elif prior_prob[tag]<0.9:
            prior_prob[tag]=bkt_update(0,p[tag])
    return prior_prob